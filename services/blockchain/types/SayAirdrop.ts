/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from './common';

export interface SayAirdropInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'acceptOwnership'
      | 'clawBackSayTokens'
      | 'hasClaimed'
      | 'merkleRoot'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'safeYieldConfigs'
      | 'sayToken'
      | 'setConfig'
      | 'setMerkleRoot'
      | 'stakeAndVestSayTokens'
      | 'transferOwnership'
      | 'unpause',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'MerkleRootUpdated'
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'SafeYieldConfigUpdated'
      | 'SayTokensClawedBack'
      | 'SayTokensStakedAndVested'
      | 'Unpaused',
  ): EventFragment;

  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'clawBackSayTokens',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasClaimed',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'merkleRoot',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'safeYieldConfigs',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'sayToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMerkleRoot',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeAndVestSayTokens',
    values: [BigNumberish, BytesLike[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'clawBackSayTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'hasClaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeYieldConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sayToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setMerkleRoot',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakeAndVestSayTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
}

export namespace MerkleRootUpdatedEvent {
  export type InputTuple = [_merkleRoot: BytesLike];
  export type OutputTuple = [_merkleRoot: string];
  export interface OutputObject {
    _merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SafeYieldConfigUpdatedEvent {
  export type InputTuple = [safeYieldConfigs: AddressLike];
  export type OutputTuple = [safeYieldConfigs: string];
  export interface OutputObject {
    safeYieldConfigs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SayTokensClawedBackEvent {
  export type InputTuple = [admin: AddressLike, amount: BigNumberish];
  export type OutputTuple = [admin: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SayTokensStakedAndVestedEvent {
  export type InputTuple = [receiver: AddressLike, amount: BigNumberish];
  export type OutputTuple = [receiver: string, amount: bigint];
  export interface OutputObject {
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SayAirdrop extends BaseContract {
  connect(runner?: ContractRunner | null): SayAirdrop;
  waitForDeployment(): Promise<this>;

  interface: SayAirdropInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  clawBackSayTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  hasClaimed: TypedContractMethod<[user: AddressLike], [boolean], 'view'>;

  merkleRoot: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  safeYieldConfigs: TypedContractMethod<[], [string], 'view'>;

  sayToken: TypedContractMethod<[], [string], 'view'>;

  setConfig: TypedContractMethod<[configs: AddressLike], [void], 'nonpayable'>;

  setMerkleRoot: TypedContractMethod<
    [_merkleRoot: BytesLike],
    [void],
    'nonpayable'
  >;

  stakeAndVestSayTokens: TypedContractMethod<
    [amount: BigNumberish, merkleProof: BytesLike[]],
    [void],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'acceptOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'clawBackSayTokens',
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'hasClaimed',
  ): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'merkleRoot',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'paused',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'pendingOwner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'safeYieldConfigs',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'sayToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'setConfig',
  ): TypedContractMethod<[configs: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setMerkleRoot',
  ): TypedContractMethod<[_merkleRoot: BytesLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stakeAndVestSayTokens',
  ): TypedContractMethod<
    [amount: BigNumberish, merkleProof: BytesLike[]],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unpause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;

  getEvent(
    key: 'MerkleRootUpdated',
  ): TypedContractEvent<
    MerkleRootUpdatedEvent.InputTuple,
    MerkleRootUpdatedEvent.OutputTuple,
    MerkleRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferStarted',
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'SafeYieldConfigUpdated',
  ): TypedContractEvent<
    SafeYieldConfigUpdatedEvent.InputTuple,
    SafeYieldConfigUpdatedEvent.OutputTuple,
    SafeYieldConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'SayTokensClawedBack',
  ): TypedContractEvent<
    SayTokensClawedBackEvent.InputTuple,
    SayTokensClawedBackEvent.OutputTuple,
    SayTokensClawedBackEvent.OutputObject
  >;
  getEvent(
    key: 'SayTokensStakedAndVested',
  ): TypedContractEvent<
    SayTokensStakedAndVestedEvent.InputTuple,
    SayTokensStakedAndVestedEvent.OutputTuple,
    SayTokensStakedAndVestedEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    'MerkleRootUpdated(bytes32)': TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;
    MerkleRootUpdated: TypedContractEvent<
      MerkleRootUpdatedEvent.InputTuple,
      MerkleRootUpdatedEvent.OutputTuple,
      MerkleRootUpdatedEvent.OutputObject
    >;

    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'SafeYieldConfigUpdated(address)': TypedContractEvent<
      SafeYieldConfigUpdatedEvent.InputTuple,
      SafeYieldConfigUpdatedEvent.OutputTuple,
      SafeYieldConfigUpdatedEvent.OutputObject
    >;
    SafeYieldConfigUpdated: TypedContractEvent<
      SafeYieldConfigUpdatedEvent.InputTuple,
      SafeYieldConfigUpdatedEvent.OutputTuple,
      SafeYieldConfigUpdatedEvent.OutputObject
    >;

    'SayTokensClawedBack(address,uint256)': TypedContractEvent<
      SayTokensClawedBackEvent.InputTuple,
      SayTokensClawedBackEvent.OutputTuple,
      SayTokensClawedBackEvent.OutputObject
    >;
    SayTokensClawedBack: TypedContractEvent<
      SayTokensClawedBackEvent.InputTuple,
      SayTokensClawedBackEvent.OutputTuple,
      SayTokensClawedBackEvent.OutputObject
    >;

    'SayTokensStakedAndVested(address,uint256)': TypedContractEvent<
      SayTokensStakedAndVestedEvent.InputTuple,
      SayTokensStakedAndVestedEvent.OutputTuple,
      SayTokensStakedAndVestedEvent.OutputObject
    >;
    SayTokensStakedAndVested: TypedContractEvent<
      SayTokensStakedAndVestedEvent.InputTuple,
      SayTokensStakedAndVestedEvent.OutputTuple,
      SayTokensStakedAndVestedEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
