/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common';

export type StakeStruct = {
  stakeAmount: BigNumberish;
  usdcRewardsDebt: BigNumberish;
  safeRewardsDebt: BigNumberish;
};

export type StakeStructOutput = [
  stakeAmount: bigint,
  usdcRewardsDebt: bigint,
  safeRewardsDebt: bigint,
] & { stakeAmount: bigint; usdcRewardsDebt: bigint; safeRewardsDebt: bigint };

export interface SayStakerAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'PRECISION'
      | 'acceptOwnership'
      | 'addCallback'
      | 'allowance'
      | 'approve'
      | 'approveStakingAgent'
      | 'approvedStakingAgent'
      | 'balanceOf'
      | 'calculatePendingRewards'
      | 'claimRewards'
      | 'decimals'
      | 'getAllCallbacks'
      | 'getCallback'
      | 'getUserStake'
      | 'lastUpdateRewardsTimestamp'
      | 'lastUsdcBalance'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'pendingOwner'
      | 'removeCallback'
      | 'renounceOwnership'
      | 'safeAccumulatedRewardsPerStake'
      | 'safeToken'
      | 'safeYieldConfigs'
      | 'setConfig'
      | 'stake'
      | 'stakeFor'
      | 'stakeForMany'
      | 'symbol'
      | 'totalStaked'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unStake'
      | 'unpause'
      | 'unstakeVestedTokens'
      | 'updateRewards'
      | 'usdc'
      | 'usdcAccumulatedRewardsPerStake'
      | 'userStake',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'Approval'
      | 'CallBackAdded'
      | 'CallBackRemoved'
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'RewardsClaimed'
      | 'SafeYieldConfigUpdated'
      | 'Staked'
      | 'StakingAgentApproved'
      | 'Transfer'
      | 'UnStaked'
      | 'Unpaused',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'PRECISION', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addCallback',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'approveStakingAgent',
    values: [AddressLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'approvedStakingAgent',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePendingRewards',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimRewards',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAllCallbacks',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCallback',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserStake',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastUpdateRewardsTimestamp',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'lastUsdcBalance',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeCallback',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'safeAccumulatedRewardsPerStake',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'safeToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeYieldConfigs',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'stakeFor',
    values: [AddressLike, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'stakeForMany',
    values: [AddressLike[], BigNumberish[], boolean],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalStaked',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'unStake',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unstakeVestedTokens',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'updateRewards',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'usdc', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'usdcAccumulatedRewardsPerStake',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'userStake',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: 'PRECISION', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addCallback',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'approveStakingAgent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'approvedStakingAgent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePendingRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAllCallbacks',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCallback',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserStake',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastUpdateRewardsTimestamp',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastUsdcBalance',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeCallback',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'safeAccumulatedRewardsPerStake',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'safeToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'safeYieldConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stakeFor', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'stakeForMany',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalStaked',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unStake', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unstakeVestedTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateRewards',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'usdc', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'usdcAccumulatedRewardsPerStake',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'userStake', data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish,
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallBackAddedEvent {
  export type InputTuple = [callback: AddressLike];
  export type OutputTuple = [callback: string];
  export interface OutputObject {
    callback: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallBackRemovedEvent {
  export type InputTuple = [callback: AddressLike];
  export type OutputTuple = [callback: string];
  export interface OutputObject {
    callback: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    safeRewards: BigNumberish,
    usdcRewards: BigNumberish,
  ];
  export type OutputTuple = [
    user: string,
    safeRewards: bigint,
    usdcRewards: bigint,
  ];
  export interface OutputObject {
    user: string;
    safeRewards: bigint;
    usdcRewards: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SafeYieldConfigUpdatedEvent {
  export type InputTuple = [configs: AddressLike];
  export type OutputTuple = [configs: string];
  export interface OutputObject {
    configs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingAgentApprovedEvent {
  export type InputTuple = [agent: AddressLike, isApproved: boolean];
  export type OutputTuple = [agent: string, isApproved: boolean];
  export interface OutputObject {
    agent: string;
    isApproved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish,
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnStakedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SayStakerAbi extends BaseContract {
  connect(runner?: ContractRunner | null): SayStakerAbi;
  waitForDeployment(): Promise<this>;

  interface: SayStakerAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  PRECISION: TypedContractMethod<[], [bigint], 'view'>;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  addCallback: TypedContractMethod<
    [callback: AddressLike],
    [void],
    'nonpayable'
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  approveStakingAgent: TypedContractMethod<
    [agent: AddressLike, isApproved: boolean],
    [void],
    'nonpayable'
  >;

  approvedStakingAgent: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    'view'
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], 'view'>;

  calculatePendingRewards: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        pendingUsdcRewards: bigint;
        pendingSafeRewards: bigint;
        accumulateUsdcRewards: bigint;
        accumulateSafeRewards: bigint;
      },
    ],
    'view'
  >;

  claimRewards: TypedContractMethod<[user: AddressLike], [void], 'nonpayable'>;

  decimals: TypedContractMethod<[], [bigint], 'view'>;

  getAllCallbacks: TypedContractMethod<[], [string[]], 'view'>;

  getCallback: TypedContractMethod<[index: BigNumberish], [string], 'view'>;

  getUserStake: TypedContractMethod<
    [_user: AddressLike],
    [StakeStructOutput],
    'view'
  >;

  lastUpdateRewardsTimestamp: TypedContractMethod<[], [bigint], 'view'>;

  lastUsdcBalance: TypedContractMethod<[], [bigint], 'view'>;

  name: TypedContractMethod<[], [string], 'view'>;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  removeCallback: TypedContractMethod<
    [callback: AddressLike],
    [void],
    'nonpayable'
  >;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  safeAccumulatedRewardsPerStake: TypedContractMethod<[], [bigint], 'view'>;

  safeToken: TypedContractMethod<[], [string], 'view'>;

  safeYieldConfigs: TypedContractMethod<[], [string], 'view'>;

  setConfig: TypedContractMethod<[configs: AddressLike], [void], 'nonpayable'>;

  stake: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  stakeFor: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, Vesting: boolean],
    [void],
    'nonpayable'
  >;

  stakeForMany: TypedContractMethod<
    [users: AddressLike[], amounts: BigNumberish[], Vesting: boolean],
    [void],
    'nonpayable'
  >;

  symbol: TypedContractMethod<[], [string], 'view'>;

  totalStaked: TypedContractMethod<[], [bigint], 'view'>;

  totalSupply: TypedContractMethod<[], [bigint], 'view'>;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    'nonpayable'
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unStake: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  unstakeVestedTokens: TypedContractMethod<[], [void], 'nonpayable'>;

  updateRewards: TypedContractMethod<[], [void], 'nonpayable'>;

  usdc: TypedContractMethod<[], [string], 'view'>;

  usdcAccumulatedRewardsPerStake: TypedContractMethod<[], [bigint], 'view'>;

  userStake: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stakeAmount: bigint;
        usdcRewardsDebt: bigint;
        safeRewardsDebt: bigint;
      },
    ],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'PRECISION',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'acceptOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'addCallback',
  ): TypedContractMethod<[callback: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'allowance',
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    'view'
  >;
  getFunction(
    nameOrSignature: 'approve',
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'approveStakingAgent',
  ): TypedContractMethod<
    [agent: AddressLike, isApproved: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'approvedStakingAgent',
  ): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'balanceOf',
  ): TypedContractMethod<[account: AddressLike], [bigint], 'view'>;
  getFunction(nameOrSignature: 'calculatePendingRewards'): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        pendingUsdcRewards: bigint;
        pendingSafeRewards: bigint;
        accumulateUsdcRewards: bigint;
        accumulateSafeRewards: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'claimRewards',
  ): TypedContractMethod<[user: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'decimals',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'getAllCallbacks',
  ): TypedContractMethod<[], [string[]], 'view'>;
  getFunction(
    nameOrSignature: 'getCallback',
  ): TypedContractMethod<[index: BigNumberish], [string], 'view'>;
  getFunction(
    nameOrSignature: 'getUserStake',
  ): TypedContractMethod<[_user: AddressLike], [StakeStructOutput], 'view'>;
  getFunction(
    nameOrSignature: 'lastUpdateRewardsTimestamp',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'lastUsdcBalance',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'name',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'paused',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'pendingOwner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeCallback',
  ): TypedContractMethod<[callback: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'safeAccumulatedRewardsPerStake',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'safeToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'safeYieldConfigs',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'setConfig',
  ): TypedContractMethod<[configs: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stake',
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'stakeFor',
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish, Vesting: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'stakeForMany',
  ): TypedContractMethod<
    [users: AddressLike[], amounts: BigNumberish[], Vesting: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'symbol',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'totalStaked',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'totalSupply',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'transfer',
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferFrom',
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unStake',
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unpause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unstakeVestedTokens',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'updateRewards',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'usdc',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'usdcAccumulatedRewardsPerStake',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(nameOrSignature: 'userStake'): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        stakeAmount: bigint;
        usdcRewardsDebt: bigint;
        safeRewardsDebt: bigint;
      },
    ],
    'view'
  >;

  getEvent(
    key: 'Approval',
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: 'CallBackAdded',
  ): TypedContractEvent<
    CallBackAddedEvent.InputTuple,
    CallBackAddedEvent.OutputTuple,
    CallBackAddedEvent.OutputObject
  >;
  getEvent(
    key: 'CallBackRemoved',
  ): TypedContractEvent<
    CallBackRemovedEvent.InputTuple,
    CallBackRemovedEvent.OutputTuple,
    CallBackRemovedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferStarted',
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'RewardsClaimed',
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: 'SafeYieldConfigUpdated',
  ): TypedContractEvent<
    SafeYieldConfigUpdatedEvent.InputTuple,
    SafeYieldConfigUpdatedEvent.OutputTuple,
    SafeYieldConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'Staked',
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: 'StakingAgentApproved',
  ): TypedContractEvent<
    StakingAgentApprovedEvent.InputTuple,
    StakingAgentApprovedEvent.OutputTuple,
    StakingAgentApprovedEvent.OutputObject
  >;
  getEvent(
    key: 'Transfer',
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: 'UnStaked',
  ): TypedContractEvent<
    UnStakedEvent.InputTuple,
    UnStakedEvent.OutputTuple,
    UnStakedEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    'Approval(address,address,uint256)': TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    'CallBackAdded(address)': TypedContractEvent<
      CallBackAddedEvent.InputTuple,
      CallBackAddedEvent.OutputTuple,
      CallBackAddedEvent.OutputObject
    >;
    CallBackAdded: TypedContractEvent<
      CallBackAddedEvent.InputTuple,
      CallBackAddedEvent.OutputTuple,
      CallBackAddedEvent.OutputObject
    >;

    'CallBackRemoved(address)': TypedContractEvent<
      CallBackRemovedEvent.InputTuple,
      CallBackRemovedEvent.OutputTuple,
      CallBackRemovedEvent.OutputObject
    >;
    CallBackRemoved: TypedContractEvent<
      CallBackRemovedEvent.InputTuple,
      CallBackRemovedEvent.OutputTuple,
      CallBackRemovedEvent.OutputObject
    >;

    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'RewardsClaimed(address,uint128,uint128)': TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    'SafeYieldConfigUpdated(address)': TypedContractEvent<
      SafeYieldConfigUpdatedEvent.InputTuple,
      SafeYieldConfigUpdatedEvent.OutputTuple,
      SafeYieldConfigUpdatedEvent.OutputObject
    >;
    SafeYieldConfigUpdated: TypedContractEvent<
      SafeYieldConfigUpdatedEvent.InputTuple,
      SafeYieldConfigUpdatedEvent.OutputTuple,
      SafeYieldConfigUpdatedEvent.OutputObject
    >;

    'Staked(address,uint128)': TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    'StakingAgentApproved(address,bool)': TypedContractEvent<
      StakingAgentApprovedEvent.InputTuple,
      StakingAgentApprovedEvent.OutputTuple,
      StakingAgentApprovedEvent.OutputObject
    >;
    StakingAgentApproved: TypedContractEvent<
      StakingAgentApprovedEvent.InputTuple,
      StakingAgentApprovedEvent.OutputTuple,
      StakingAgentApprovedEvent.OutputObject
    >;

    'Transfer(address,address,uint256)': TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    'UnStaked(address,uint128)': TypedContractEvent<
      UnStakedEvent.InputTuple,
      UnStakedEvent.OutputTuple,
      UnStakedEvent.OutputObject
    >;
    UnStaked: TypedContractEvent<
      UnStakedEvent.InputTuple,
      UnStakedEvent.OutputTuple,
      UnStakedEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
