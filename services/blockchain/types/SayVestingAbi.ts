/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  AddressLike,
  BaseContract,
  BigNumberish,
  BytesLike,
  ContractMethod,
  ContractRunner,
  EventFragment,
  FunctionFragment,
  Interface,
  Listener,
  Result,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedContractMethod,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedLogDescription,
} from './common';

export type VestingScheduleStruct = {
  totalAmount: BigNumberish;
  amountClaimed: BigNumberish;
  start: BigNumberish;
  cliff: BigNumberish;
  duration: BigNumberish;
};

export type VestingScheduleStructOutput = [
  totalAmount: bigint,
  amountClaimed: bigint,
  start: bigint,
  cliff: bigint,
  duration: bigint,
] & {
  totalAmount: bigint;
  amountClaimed: bigint;
  start: bigint;
  cliff: bigint;
  duration: bigint;
};

export interface SayVestingAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'BPS'
      | 'ONE_MONTH'
      | 'VESTING_DURATION'
      | 'acceptOwnership'
      | 'approveVestingAgent'
      | 'approvedVestingAgents'
      | 'getSchedules'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'pendingOwner'
      | 'renounceOwnership'
      | 'sSayToken'
      | 'safeYieldConfigs'
      | 'schedules'
      | 'setConfig'
      | 'transferOwnership'
      | 'unlockPercentagePerMonth'
      | 'unlock_sSayTokens'
      | 'unlock_sSayTokensFor'
      | 'unlockedStakedSayToken'
      | 'unpause'
      | 'userHasVestedBeforeIDO'
      | 'vestFor'
      | 'vestedAmount',
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | 'OwnershipTransferStarted'
      | 'OwnershipTransferred'
      | 'Paused'
      | 'SafeYieldConfigUpdated'
      | 'TokensVestedFor'
      | 'Unpaused'
      | 'VestingAgentApproved'
      | 'sSayTokensClaimed',
  ): EventFragment;

  encodeFunctionData(functionFragment: 'BPS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ONE_MONTH', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'VESTING_DURATION',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'acceptOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'approveVestingAgent',
    values: [AddressLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'approvedVestingAgents',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSchedules',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'sSayToken', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'safeYieldConfigs',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'schedules',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockPercentagePerMonth',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'unlock_sSayTokens',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'unlock_sSayTokensFor',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockedStakedSayToken',
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'userHasVestedBeforeIDO',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestFor',
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'vestedAmount',
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: 'BPS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ONE_MONTH', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'VESTING_DURATION',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'acceptOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'approveVestingAgent',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'approvedVestingAgents',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSchedules',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'sSayToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'safeYieldConfigs',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'schedules', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockPercentagePerMonth',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlock_sSayTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlock_sSayTokensFor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockedStakedSayToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'userHasVestedBeforeIDO',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'vestFor', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'vestedAmount',
    data: BytesLike,
  ): Result;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SafeYieldConfigUpdatedEvent {
  export type InputTuple = [configs: AddressLike];
  export type OutputTuple = [configs: string];
  export interface OutputObject {
    configs: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensVestedForEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingAgentApprovedEvent {
  export type InputTuple = [agent: AddressLike, isApproved: boolean];
  export type OutputTuple = [agent: string, isApproved: boolean];
  export interface OutputObject {
    agent: string;
    isApproved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace sSayTokensClaimedEvent {
  export type InputTuple = [user: AddressLike, tokensClaimed: BigNumberish];
  export type OutputTuple = [user: string, tokensClaimed: bigint];
  export interface OutputObject {
    user: string;
    tokensClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SayVestingAbi extends BaseContract {
  connect(runner?: ContractRunner | null): SayVestingAbi;
  waitForDeployment(): Promise<this>;

  interface: SayVestingAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  BPS: TypedContractMethod<[], [bigint], 'view'>;

  ONE_MONTH: TypedContractMethod<[], [bigint], 'view'>;

  VESTING_DURATION: TypedContractMethod<[], [bigint], 'view'>;

  acceptOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  approveVestingAgent: TypedContractMethod<
    [agent: AddressLike, isApproved: boolean],
    [void],
    'nonpayable'
  >;

  approvedVestingAgents: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    'view'
  >;

  getSchedules: TypedContractMethod<
    [user: AddressLike],
    [VestingScheduleStructOutput],
    'view'
  >;

  owner: TypedContractMethod<[], [string], 'view'>;

  pause: TypedContractMethod<[], [void], 'nonpayable'>;

  paused: TypedContractMethod<[], [boolean], 'view'>;

  pendingOwner: TypedContractMethod<[], [string], 'view'>;

  renounceOwnership: TypedContractMethod<[], [void], 'nonpayable'>;

  sSayToken: TypedContractMethod<[], [string], 'view'>;

  safeYieldConfigs: TypedContractMethod<[], [string], 'view'>;

  schedules: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        amountClaimed: bigint;
        start: bigint;
        cliff: bigint;
        duration: bigint;
      },
    ],
    'view'
  >;

  setConfig: TypedContractMethod<[configs: AddressLike], [void], 'nonpayable'>;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    'nonpayable'
  >;

  unlockPercentagePerMonth: TypedContractMethod<[], [bigint], 'view'>;

  unlock_sSayTokens: TypedContractMethod<[], [bigint], 'nonpayable'>;

  unlock_sSayTokensFor: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    'nonpayable'
  >;

  unlockedStakedSayToken: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    'nonpayable'
  >;

  unpause: TypedContractMethod<[], [void], 'nonpayable'>;

  userHasVestedBeforeIDO: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    'view'
  >;

  vestFor: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;

  vestedAmount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'BPS',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'ONE_MONTH',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'VESTING_DURATION',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'acceptOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'approveVestingAgent',
  ): TypedContractMethod<
    [agent: AddressLike, isApproved: boolean],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'approvedVestingAgents',
  ): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'getSchedules',
  ): TypedContractMethod<
    [user: AddressLike],
    [VestingScheduleStructOutput],
    'view'
  >;
  getFunction(
    nameOrSignature: 'owner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'paused',
  ): TypedContractMethod<[], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'pendingOwner',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'renounceOwnership',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'sSayToken',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'safeYieldConfigs',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(nameOrSignature: 'schedules'): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        amountClaimed: bigint;
        start: bigint;
        cliff: bigint;
        duration: bigint;
      },
    ],
    'view'
  >;
  getFunction(
    nameOrSignature: 'setConfig',
  ): TypedContractMethod<[configs: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'transferOwnership',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unlockPercentagePerMonth',
  ): TypedContractMethod<[], [bigint], 'view'>;
  getFunction(
    nameOrSignature: 'unlock_sSayTokens',
  ): TypedContractMethod<[], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unlock_sSayTokensFor',
  ): TypedContractMethod<[user: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unlockedStakedSayToken',
  ): TypedContractMethod<[user: AddressLike], [bigint], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'unpause',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'userHasVestedBeforeIDO',
  ): TypedContractMethod<[user: AddressLike], [boolean], 'view'>;
  getFunction(
    nameOrSignature: 'vestFor',
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'vestedAmount',
  ): TypedContractMethod<[user: AddressLike], [bigint], 'nonpayable'>;

  getEvent(
    key: 'OwnershipTransferStarted',
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: 'Paused',
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: 'SafeYieldConfigUpdated',
  ): TypedContractEvent<
    SafeYieldConfigUpdatedEvent.InputTuple,
    SafeYieldConfigUpdatedEvent.OutputTuple,
    SafeYieldConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: 'TokensVestedFor',
  ): TypedContractEvent<
    TokensVestedForEvent.InputTuple,
    TokensVestedForEvent.OutputTuple,
    TokensVestedForEvent.OutputObject
  >;
  getEvent(
    key: 'Unpaused',
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: 'VestingAgentApproved',
  ): TypedContractEvent<
    VestingAgentApprovedEvent.InputTuple,
    VestingAgentApprovedEvent.OutputTuple,
    VestingAgentApprovedEvent.OutputObject
  >;
  getEvent(
    key: 'sSayTokensClaimed',
  ): TypedContractEvent<
    sSayTokensClaimedEvent.InputTuple,
    sSayTokensClaimedEvent.OutputTuple,
    sSayTokensClaimedEvent.OutputObject
  >;

  filters: {
    'OwnershipTransferStarted(address,address)': TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    'Paused(address)': TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    'SafeYieldConfigUpdated(address)': TypedContractEvent<
      SafeYieldConfigUpdatedEvent.InputTuple,
      SafeYieldConfigUpdatedEvent.OutputTuple,
      SafeYieldConfigUpdatedEvent.OutputObject
    >;
    SafeYieldConfigUpdated: TypedContractEvent<
      SafeYieldConfigUpdatedEvent.InputTuple,
      SafeYieldConfigUpdatedEvent.OutputTuple,
      SafeYieldConfigUpdatedEvent.OutputObject
    >;

    'TokensVestedFor(address,uint256)': TypedContractEvent<
      TokensVestedForEvent.InputTuple,
      TokensVestedForEvent.OutputTuple,
      TokensVestedForEvent.OutputObject
    >;
    TokensVestedFor: TypedContractEvent<
      TokensVestedForEvent.InputTuple,
      TokensVestedForEvent.OutputTuple,
      TokensVestedForEvent.OutputObject
    >;

    'Unpaused(address)': TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    'VestingAgentApproved(address,bool)': TypedContractEvent<
      VestingAgentApprovedEvent.InputTuple,
      VestingAgentApprovedEvent.OutputTuple,
      VestingAgentApprovedEvent.OutputObject
    >;
    VestingAgentApproved: TypedContractEvent<
      VestingAgentApprovedEvent.InputTuple,
      VestingAgentApprovedEvent.OutputTuple,
      VestingAgentApprovedEvent.OutputObject
    >;

    'sSayTokensClaimed(address,uint256)': TypedContractEvent<
      sSayTokensClaimedEvent.InputTuple,
      sSayTokensClaimedEvent.OutputTuple,
      sSayTokensClaimedEvent.OutputObject
    >;
    sSayTokensClaimed: TypedContractEvent<
      sSayTokensClaimedEvent.InputTuple,
      sSayTokensClaimedEvent.OutputTuple,
      sSayTokensClaimedEvent.OutputObject
    >;
  };
}
